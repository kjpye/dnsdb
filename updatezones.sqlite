#!/usr/bin/perl -w

use strict;
use English;

use DBI;

use Net::DNS;
use Net::DNS::Nameserver;
use Net::DNS::Resolver;
use Net::DNS::RR::SOA;
use Net::DNS::RR::TSIG;

use Data::Dumper;

### Configuration section

my $runasuid = 1000; # kevinp
my $runasgid = 100;  # users

### End configuration
my $verbose = 0;
$verbose = 1; # uncomment for debugging
$verbose = 2; # uncomment to dump data structures as well

my $hasixfr = 0;
my $hasiterator = 0;

my $keydir = '/etc/named.d/keys';

# The list of record types we want to keep in the database.
#   Don't mention SOA records here; they're treated specially.

my @RRtypes = qw(a cname mx ns ptr srv txt);

my $db = 'dns2';

if($#ARGV >= 0) {
  for my $arg (@ARGV) {
    my ($server, $zone, $view) = split ':', $arg;
    $view //= 'unknown';
    if ($zone eq 'all') {
      my @zones;
      #my $dbh = DBI->connect("dbi:Pg:dbname=$db", '', '', {AutoCommit => 0});
      my $dbh = DBI->connect("dbi:SQLite:dbname=/tmp/dns-db.sqlite3", {AutoCommit => 0});
      my $sth = $dbh->prepare("SELECT zone.name, view.name, server.address
                               FROM zone, view, server
                               WHERE zone.view = view.viewid
                                 AND zone.deleted IS NULL
                                 AND zone.serverid = zerver.serverid
                               ORDER BY zone.name, view.name;
                              ");
      $sth->execute();
      while(my @row = $sth->fetchrow_array()) {
        my ($zone, $view, $server) = @row;
        push @zones, "$server:$zone:$view";
      }
      $dbh->disconnect;
      for my $z (@zones) {
        print $z, "\n";
        my ($server, $zone, $view) = split ':', $z;
        update_zone($server, $view, $zone);
      }
    } else {
      $zone =~ s/\.*$/./;
      update_zone($server, $view, $zone);
    }
  }
  exit 0;
}

my $readpipe;
my $writepipe;

sub query_handler {
  my ($qname, $qclass, $qtype, $peerhost,$query,$conn) = @_;
  my ($rcode, @ans, @auth, @add);

  print STDERR "Received query from $peerhost to ". $conn->{sockhost}. "\n" if $verbose > 0;

  return ('NOTIMP', \@ans, \@auth, \@add);
}

sub notify_handler {
  my ($qname, $qclass, $qtype, $peerhost, $query, $conn) = @_;
  my ($rcode, @ans, @auth, @add);

  print STDERR "Received notify from $peerhost to ". $conn->{sockhost}. "\n" if $verbose > 0;
  $query->print if $verbose > 1;

  my $view = 'unknown';
  for my $rr ($query->additional) {
    $view = $rr->name if $rr->type eq 'TSIG';
  }
  print $writepipe "$peerhost:$qname:$view\n";
  $rcode = 'NOERROR';

  return ($rcode, \@ans, \@auth, \@add);
}

pipe $readpipe, $writepipe;

my $childid = fork();

if ($childid) { # parent process -- wait for notify and send details to child
  close $readpipe;
  my $ofh = select $writepipe;
  $| = 1;
  select $ofh;
  my $ns = new Net::DNS::Nameserver(
                 LocalPort     => 53,
                 ReplyHandler  => \&query_handler,
                 NotifyHandler => \&notify_handler,
                 Verbose       => $verbose,
               ) or die "Couldn't create name server object\n";
# Drop privilege (should be configurable)
  $UID = $runasuid;
  $GID = $runasgid;
  $ns->main_loop;
  close $writepipe;
} else { # child process -- perform zone transfers and update database
  close $writepipe;
# Drop privilege (configurable?)
  $UID = $EUID = $runasuid;
  $GID = $EGID = $runasgid;
  while (my $z = <$readpipe>) {
    chomp $z;
    my ($server, $zone, $view) = split ':', $z;
    update_zone($server, $view, $zone);
  }
  close $readpipe;
}

sub get_viewid {
  my $view = shift;
  my $dbh = shift;
  my $viewid = 0;

  return 0 unless $view;
 
  print "View: \"$view\"\n" if $verbose > 0;

# This would be nice, but requires Postgresql 9.5
#
#  my $sth = $dbh->prepare("INSERT INTO view (name)
#                           VALUES (?)
#                           ON CONFLICT DO NOTHING
#                           RETURNING viewid");

  my $sth = $dbh->prepare("SELECT viewid
                           FROM   view
                           WHERE  name = ?
                          ");
  $sth->execute($view);
  while(my @row = $sth->fetchrow_array()) {
    $viewid = $row[0];
  }
  $viewid;
}

sub get_serverid {
  my $ip       = shift;
  my $dbh      = shift;
  my $serverid = 0;

  return 0 unless $ip;
 
  print "Server ip: \"$ip\"\n" if $verbose > 0;

# This would be nice, but requires Postgresql 9.5
#
#  my $sth = $dbh->prepare("INSERT INTO server (ip)
#                           VALUES (?)
#                           ON CONFLICT DO NOTHING
#                           RETURNING viewid");

  my $sth = $dbh->prepare("SELECT serverid
                           FROM   server
                           WHERE  address = ?
                          ");
  $sth->execute($ip);
  while(my @row = $sth->fetchrow_array()) {
    $serverid = $row[0];
  }
  $serverid;
}

# This is where all the real work is done

sub update_zone {
  my ($server, $view, $zone) = @_;
  print "update_zone - args: $server, $view, $zone\n" if $verbose > 0;
  $zone =~ s/\.*$/./; # Canonicalise again!
  $view //= 'unknown';
  $view =~ s/\.*$//; # remove any trailing dots

# open database
  #my $dbh = DBI->connect("dbi:Pg:dbname=$db", '', '', {AutoCommit => 0});
  my $dbh = DBI->connect("dbi:SQLite:dbname=/tmp/dns-db.sqlite3", {AutoCommit => 0});


# get zone information
  my $sth = $dbh->prepare("SELECT zoneid
                           FROM   zone, view, server
                           WHERE  zone.name = ?
                             AND  view.name = ?
                             AND  zone.view = view.viewid
                             AND  zone.server = server.serverid
                             AND  server.address = ?
                             AND  zone.deleted IS NULL
                          ");
  $sth->execute($zone, $view, $server);
  my $zoneid = 0;
  while (my @row = $sth->fetchrow_array()) {
    $zoneid = $row[0];
  }

  if ( ! $zoneid ) { # zone isn't in database yet
    populate_new_zone($server, $zone, $view, $dbh);
  } else {
    update_existing_zone($server, $zone, $view, $zoneid, $dbh);
  }

  $dbh->disconnect();
}

sub make_iterator {
  my @rrs = @_;
  print "RRs are ", Dumper(\@rrs), "\n" if $verbose > 1;
  return sub { shift @rrs; };
}

sub populate_new_zone {
  my $server = shift;
  my $zone   = shift;
  my $view   = shift;
  my $dbh    = shift;

  print "Populate '$zone' in view '$view' from server '$server'\n" if $verbose > 0;
  my $zoneid = 0;

## Check sanity, creating entries as required

# Get the view id, making sure it exists
  my $viewid = get_viewid ($view, $dbh);

# Get server id, making sure it exists
  my $serverid = get_serverid ($server, $dbh);

# create entry in zone table
  my $sth = $dbh->prepare("INSERT INTO zone (zoneid, name, view, server)
                           VALUES           (NULL,   ?,    ?,    ?     )
                          ");
  $sth->execute($zone, $viewid, $serverid);
  $sth = $dbh->prepare("SELECT zoneid FROM zone
                        WHERE  name   = ?
                          AND  view   = ?
                          AND  server = ?
                       ");
  $sth->execute($zone, $viewid, $serverid);
  while (my @row = $sth->fetchrow_array()) {
    $zoneid = $row[0];
  }

# fetch data and update tables
  my $soa = undef;
  my $res = new Net::DNS::Resolver(nameservers => [$server]) or die "Could not create resolver\n";
  prepare_db($dbh);
  if ($view ne 'unknown') {
    my $tsig = create Net::DNS::RR::TSIG("$keydir/$view.key");
    $res->tsig($tsig);
  }
  my $nextrr;
  if ($hasiterator) {
    $nextrr = $res->axfr($zone);
  } else {
    my @rrs = $res->axfr($zone);
    $nextrr = make_iterator(@rrs);
  }
  $soa = $nextrr->();
  print "Initial SOA: ", Dumper(\$soa), "\n" if $verbose > 0;
  while(my $rr = $nextrr->()) {
    add_rr($zoneid, $rr);
  }

# update zone table with new zone
  print "Updating soa\n" if $verbose > 0;
  if (defined $soa) {
    $sth = $dbh->prepare("INSERT INTO dns_soa (zone, name, ttl, mname, rname, serial, refresh, retry, expire, minimum)
                          VALUES              (?,    ?,    ?,   ?,     ?,     ?,      ?,       ?,     ?,      ?      )
                         ");
    $sth->execute($zoneid,
                  $zone,
                  $soa->ttl,
                  $soa->mname,
                  $soa->rname,
                  $soa->serial,
                  $soa->refresh,
                  $soa->retry,
                  $soa->expire,
                  $soa->minimum
                 );
  }

# Now commit the data so it's visible
  print "Committing data\n" if $verbose > 0;
  $dbh->commit();
}

sub update_existing_zone {
  my $server = shift;
  my $zone   = shift;
  my $view   = shift;
  my $zoneid = shift;
  my $dbh    = shift;

  print "Updating '$zone' ($server, $view, $zoneid)\n" if $verbose > 0;
# Get the existing SOA as an object
  my $sth = $dbh->prepare("SELECT serial
                           FROM dns_soa
                           WHERE  zone = ?
                             AND  deleted IS NULL
                          ");
  $sth->execute($zoneid);
  my $serial = 0;
  while(my @row = $sth->fetchrow_array()) {
    $serial = $row[0];
  }
  print "Old serial number: ", $serial, "\n" if $verbose > 0;
# Create an SOA RR with the old serial number we can attach to an IXFR query
  my $soa = new Net::DNS::RR("$zone SOA z x.y $serial 1 1 1 1");

# Make an AXFR/IXFR query
  print "Creating new resolver for $server\n" if $verbose > 0;
  my $resolver = new Net::DNS::Resolver(nameservers => [ $server ] );
  my $tsig = create Net::DNS::RR::TSIG("$keydir/$view.key");
  my $resp = $resolver->tsig($tsig);
print "query...";
  my $packet = $resolver->query($zone, 'SOA');
  if (defined $packet) {
print "response\n";
    my @answer = $packet->answer;
    if (@answer and $answer[0]->type eq 'SOA') {
my $soaserial = $answer[0]->serial;
print "new serial: $soaserial\n";
      if ($answer[0]->serial == $serial) {
        print "Zone $zone is up to date\n" if $verbose > 0;
        return;
      }
      my $nextrr;
#      if ($hasiterator) {
#        if ($hasixfr) {
####TODO
#        } else {
#          #$nextrr = $resolver->axfr($zone);
#        }
#      } else {
##    my @rrs = $resolver->axfr($zone);
##    $nextrr = make_iterator(@rrs);
#      }
#      #my $qry = $resolver->query($zone, 'IXFR', $soa); # FIX
#      #my $iterator = $resolver->axfr($zone, 'IN');
      if ($view ne 'unknown') {
        $tsig = create Net::DNS::RR::TSIG("$keydir/$view.key");
        $resolver->tsig($tsig);
      }
      my @rrs = $resolver->axfr($zone, 'IN');
      if (scalar @rrs < 1) {
        print $resolver->errorstring(), "\n";
        return;
      }
# Run through each returned RR processing it
      my $state = 0;
      print "RRs read: ", Dumper(\@rrs), "\n" if $verbose > 1;
      my $newsoa = shift @rrs;
      print "New SOA: :", Dumper(\$newsoa), "\n" if $verbose > 1;
        prepare_db($dbh); # set up all the DB queries
        for my $rr (@rrs) {
          print "Handling RR: ", Dumper(\$rr), "\n" if $verbose > 1;
          if ($rr->type eq 'SOA') {
            if ($state == 0) { # initial state -- this is an IXFR transfer
              $state = 2;
            } elsif ($state == 1) { # AXFR -- there shouldn't be an SOA here
            } elsif ($state == 2) { # adding -- new state is deleting
              $state = 3;
            } elsif ($state == 3) { # deleting -- new state is adding
              $state = 2;
            } else {
            }
          } else {
            if ($state == 0) { # must be axfr -- process whole zone
              $state = 1;
              set_delete($zoneid, $dbh);
              replace_rr($zoneid, $rr);
            } elsif ($state == 1) { # doing axfr -- treat specially
              replace_rr($zoneid, $rr);
            } elsif ($state == 2) { # deleting
              del_rr($rr);
            } elsif ($state == 3) { # adding
              add_rr($rr);
            } else { # illegal state
            }
          }
        }
      print "Deleting old entries\n" if $verbose > 0;
      delete_entries($zoneid, $dbh) if $state == 1;

# add the new soa RR
      update_soa($zone, $zoneid, $newsoa, $dbh);

# Now commit the data so it's visible
      $dbh->commit();
    }
  }
}

my $add_a;
my $add_cname;
my $add_mx;
my $add_ns;
my $add_ptr;
my $add_soa;
my $add_srv;
my $add_txt;
my $del_a;
my $del_cname;
my $del_mx;
my $del_ns;
my $del_ptr;
my $del_soa;
my $del_srv;
my $del_txt;
my $keep_a;
my $keep_cname;
my $keep_mx;
my $keep_ns;
my $keep_ptr;
my $keep_soa;
my $keep_srv;
my $keep_txt;
 
sub prepare_db {
  my $dbh = shift;

  $add_a     = $dbh->prepare("INSERT INTO dns_a     (name, zone, ttl, address)
                              VALUES                (?,    ?,    ?,   ?      )
                             ");
  $del_a     = $dbh->prepare("UPDATE dns_a
                              SET    deleted = (datetime('now'))
                              WHERE  name = ?
                                AND  zone = ?
                                AND  ttl = ?
                                AND  address = ?
                                AND  deleted IS NULL
                             ");
  $keep_a     = $dbh->prepare("UPDATE dns_a
                              SET    pendingdelete = 0
                              WHERE  name = ?
                                AND  zone = ?
                                AND  ttl = ?
                                AND  address = ?
                                AND  deleted IS NULL
                             ");
  $add_cname = $dbh->prepare("INSERT INTO dns_cname (name, zone, ttl, cname)
                              VALUES                (?,    ?,    ?,   ?    )
                             ");
  $del_cname = $dbh->prepare("UPDATE dns_cname
                              SET    deleted = (datetime('now'))
                              WHERE  name = ?
                                AND  zone = ?
                                AND  ttl = ?
                                AND  cname = ?
                                AND  deleted IS NULL
                             ");
  $keep_cname = $dbh->prepare("UPDATE dns_cname
                              SET    pendingdelete = 0
                              WHERE  name = ?
                                AND  zone = ?
                                AND  ttl = ?
                                AND  cname = ?
                                AND  deleted IS NULL
                             ");
  $add_mx    = $dbh->prepare("INSERT INTO dns_mx    (name, zone, ttl, exchange, preference)
                              VALUES                (?,    ?,    ?,   ?,        ?         )
                             ");
  $del_mx    = $dbh->prepare("UPDATE dns_mx
                              SET    deleted = (datetime('now'))
                              WHERE  name = ?
                                AND  zone = ?
                                AND  ttl = ?
                                AND  exchange = ?
                                AND  preference = ?
                                AND  deleted IS NULL
                             ");
  $keep_mx    = $dbh->prepare("UPDATE dns_mx
                               SET    pendingdelete = 0
                               WHERE  name = ?
                                 AND  zone = ?
                                 AND  ttl = ?
                                 AND  exchange = ?
                                 AND  preference = ?
                                 AND  deleted IS NULL
                              ");
  $add_ns    = $dbh->prepare("INSERT INTO dns_ns    (name, zone, ttl, nsdname)
                              VALUES                (?,    ?,    ?,   ?      )
                             ");
  $del_ns    = $dbh->prepare("UPDATE dns_ns
                              SET    deleted = (datetime('now'))
                              WHERE  name = ?
                                AND  zone = ?
                                AND  ttl = ?
                                AND  nsdname = ?
                                AND  deleted IS NULL
                             ");
  $keep_ns    = $dbh->prepare("UPDATE dns_ns
                               SET    pendingdelete = 0
                               WHERE  name = ?
                                 AND  zone = ?
                                 AND  ttl = ?
                                 AND  nsdname = ?
                                 AND  deleted IS NULL
                              ");
  $add_ptr   = $dbh->prepare("INSERT INTO dns_ptr   (name, zone, ttl, address, ptrdname)
                              VALUES                (?,    ?,    ?,   ?,       ?       )
                             ");
  $del_ptr   = $dbh->prepare("UPDATE dns_ptr
                              SET    deleted = (datetime('now'))
                              WHERE  name = ?
                                AND  zone = ?
                                AND  ttl = ?
                                AND  address = ?
                                AND  ptrdname = ?
                                AND  deleted IS NULL
                             ");
  $keep_ptr   = $dbh->prepare("UPDATE dns_ptr
                               SET    pendingdelete = 0
                               WHERE  name = ?
                                 AND  zone = ?
                                 AND  ttl = ?
                                 AND  address = ?
                                 AND  ptrdname = ?
                                 AND  deleted IS NULL
                              ");
  $del_soa   = $dbh->prepare("UPDATE dns_soa
                              SET    deleted = datetime('now')
                              WHERE  zone = ?
                                AND  ttl = ?
                                AND  mname = ?
                                AND  rname = ?
                                AND  serial = ?
                                AND  refresh = ?
                                AND  retry = ?
                                AND  expire = ?
                                AND  minimum = ?
                                AND  deleted IS NULL
                             ");
  $add_srv   = $dbh->prepare("INSERT INTO dns_srv   (name, zone, ttl, priority, weight, port, target)
                              VALUES                (?,    ?,    ?,   ?,        ?,      ?,    ?     )
                             ");
  $del_srv   = $dbh->prepare("UPDATE dns_srv
                              SET    deleted = datetime('now')
                              WHERE  name = ?
                                AND  zone = ?
                                AND  ttl = ?
                                AND  priority = ?
                                AND  weight = ?
                                AND  port = ?
                                AND  target = ?
                                AND  deleted IS NULL
                             ");
  $keep_srv   = $dbh->prepare("UPDATE dns_srv
                               SET    pendingdelete = 0
                               WHERE  name = ?
                                 AND  zone = ?
                                 AND  ttl = ?
                                 AND  priority = ?
                                 AND  weight = ?
                                 AND  port = ?
                                 AND  target = ?
                                 AND  deleted IS NULL
                              ");
  $add_txt   = $dbh->prepare("INSERT INTO dns_txt   (name, zone, ttl, txtdata)
                              VALUES                (?,    ?,    ?,   ?      )
                             ");
  $del_txt   = $dbh->prepare("UPDATE dns_txt
                              SET    deleted = datetime('now')
                              WHERE  name = ?
                                AND  zone = ?
                                AND  ttl = ?
                                AND  txtdata = ?
                                AND  deleted IS NULL
                             ");
  $keep_txt   = $dbh->prepare("UPDATE dns_txt
                               SET    pendingdelete = 0
                               WHERE  name = ?
                                 AND  zone = ?
                                 AND  ttl = ?
                                 AND  txtdata = ?
                                 AND  deleted IS NULL
                              ");
}

sub set_delete {
  my $zone = shift;
  my $dbh = shift;

  for my $type (@RRtypes) {
    my $sth = $dbh->prepare("UPDATE dns_$type    
                             SET pendingdelete = 1
                             WHERE zone = ?
                               AND deleted IS NULL
                            ");
     $sth->execute($zone);
$dbh->commit(); # temporary only
  }
}

sub delete_entries {
  my $zone = shift;
  my $dbh = shift;

  for my $type (@RRtypes) {
    my $sth = $dbh->prepare("UPDATE dns_$type    
                             SET deleted       = datetime('now'),
                                 pendingdelete = 0
                             WHERE zone           = ?
                               AND pendingdelete  = 1
                               AND deleted       IS NULL
                            ");
    $sth->execute($zone);
  }
}

sub name2ip {
  my $name = shift;
  return '0.0.0.0' unless $name =~ /^\d+\.\d+\.\d+\.\d+\.in-addr\.arpa/i;
  $name =~ s/\.in-addr.arpa//i;
  my @octets = split /\./, $name;
  return '0.0.0.0' if $octets[0] > 255;
  return '0.0.0.0' if $octets[1] > 255;
  return '0.0.0.0' if $octets[2] > 255;
  return '0.0.0.0' if $octets[3] > 255;
  join '.', reverse @octets;
}

# add the RR to the database

sub add_rr {
  my $zoneid = shift;
  my $rr = shift;

  my $type = $rr->type;
  print "add rr ($type): ", Dumper(\$rr), "\n" if $verbose > 1;
  if ($type eq 'A') {
    $add_a->execute($rr->name, $zoneid, $rr->ttl, $rr->address);
  } elsif ($type eq 'CNAME') {
    $add_cname->execute($rr->name, $zoneid, $rr->ttl, $rr->cname);
  } elsif ($type eq 'MX') {
    $add_mx->execute($rr->name, $zoneid, $rr->ttl, $rr->exchange, $rr->preference);
  } elsif ($type eq 'NS') {
    $add_ns->execute($rr->name, $zoneid, $rr->ttl, $rr->nsdname);
  } elsif ($type eq 'PTR') {
    my $address = name2ip $rr->name;
    $add_ptr->execute($rr->name, $zoneid, $rr->ttl, $address, $rr->ptrdname);
  } elsif ($type eq 'SRV') {
    $add_srv->execute($rr->name, $zoneid, $rr->ttl, $rr->priority, $rr->weight, $rr->port, $rr->target);
  } elsif ($type eq 'TXT') {
    $add_txt->execute($rr->name, $zoneid, $rr->ttl, $rr->txtdata);
  } else {
    # just ignore other types (including SOA) -- should probably raise an error somewhere
  }
}

# delete the RR from the database

sub del_rr {
  my $zoneid = shift;
  my $rr = shift;

  if ($rr->type eq 'A') {
    $del_a->execute($rr->name, $zoneid, $rr->ttl, $rr->address);
  } elsif ($rr->type eq 'CNAME') {
    $del_cname->execute($rr->name, $zoneid, $rr->ttl, $rr->cname);
  } elsif ($rr->type eq 'MX') {
    $del_a->execute($rr->name, $zoneid, $rr->ttl, $rr->exchange, $rr->preference);
  } elsif ($rr->type eq 'NS') {
    $del_ns->execute($rr->name, $zoneid, $rr->ttl, $rr->nsdname);
  } elsif ($rr->type eq 'PTR') {
    my $address = name2ip $rr->name;
    $del_ptr->execute($rr->name, $zoneid, $rr->ttl, $address, $rr->ptrdname);
  } elsif ($rr->type eq 'SOA') {
    $del_soa->execute($zoneid,
                      $rr->ttl,
                      $rr->mname,
                      $rr->rname,
                      $rr->serial,
                      $rr->refresh,
                      $rr->retry,
                      $rr->expire,
                      $rr->minimum,
                      $zoneid
                     );
  } elsif ($rr->type eq 'SRV') {
    $del_srv->execute($rr->name, $zoneid, $rr->ttl, $rr->priority, $rr->weight, $rr->port, $rr->target);
  } elsif ($rr->type eq 'TXT') {
    $del_txt->execute($rr->name, $zoneid, $rr->ttl, $rr->txtdata);
  } else {
    # just ignore other types -- should probably raise an error somewhere
  }
}

# ensure the RR is in the database
#
# This is used when doing an AXFR for an existing zone.
#
# It will mark an existing entry to be retained if it already exists
# and matches, otherwise it will insert a new entry.

sub replace_rr {
  my $zoneid = shift;
  my $rr = shift;
  print "replace rr: ", Dumper(\$rr), "\n" if $verbose > 1;

  if ($rr->type eq 'A') {
    print "Updating A record\n" if $verbose > 0;
    if(0 == $keep_a->execute($rr->name, $zoneid, $rr->ttl, $rr->address)) {
      print "Adding new A record -- didn't already exist\n" if $verbose > 0;
      $add_a->execute($rr->name, $zoneid, $rr->ttl, $rr->address);
    }
  } elsif ($rr->type eq 'CNAME') {
    if(0 == $keep_cname->execute($rr->name, $zoneid, $rr->ttl, $rr->cname)) {
      $add_cname->execute($rr->name, $zoneid, $rr->ttl, $rr->cname);
    }
  } elsif ($rr->type eq 'MX') {
    if(0 == $keep_mx->execute($rr->name, $zoneid, $rr->ttl, $rr->exchange, $rr->preference)) {
      $add_mx->execute($rr->name, $zoneid, $rr->ttl, $rr->exchange, $rr->preference);
    }
  } elsif ($rr->type eq 'NS') {
    if(0 == $keep_ns->execute($rr->name, $zoneid, $rr->ttl, $rr->nsdname)) {
      $add_ns->execute($rr->name, $zoneid, $rr->ttl, $rr->nsdname);
    }
  } elsif ($rr->type eq 'PTR') {
    my $address = name2ip $rr->name;
    if(0 == $keep_ptr->execute($rr->name, $zoneid, $rr->ttl, $address, $rr->ptrdname)) {
      $add_ptr->execute($rr->name, $zoneid, $rr->ttl, $address, $rr->ptrdname);
    }
  } elsif ($rr->type eq 'SRV') {
    if(0 == $keep_srv->execute($rr->name, $zoneid, $rr->ttl, $rr->priority, $rr->weight, $rr->port, $rr->target)) {
      $add_srv->execute($rr->name, $zoneid, $rr->ttl, $rr->priority, $rr->weight, $rr->port, $rr->target);
    }
  } elsif ($rr->type eq 'TXT') {
my $name = $rr->name;
my $ttl = $rr->ttl;
my $txtdata = join '', $rr->txtdata;
print "name: $name, zoneid: $zoneid, ttl: $ttl;, data: \"$txtdata\"\n";
    if(0 == $keep_txt->execute($rr->name, $zoneid, $rr->ttl, $txtdata)) {
      $add_txt->execute($rr->name, $zoneid, $rr->ttl, $txtdata);
    }
  } else {
    # just ignore other types (including SOA) -- should probably raise an error somewhere
  }
}

sub update_soa {
  my $zone   = shift;
  my $zoneid = shift;
  my $soa    = shift;
  my $dbh    = shift;

  my $sth = $dbh->prepare("UPDATE dns_soa
                           SET    deleted = datetime('now')
                           WHERE  zone    = ?
                             AND  deleted IS NULL
                          ");
  $sth->execute($zoneid);
  $sth= $dbh->prepare("INSERT INTO dns_soa (zone, name, ttl, mname, rname, serial, refresh, retry, expire, minimum)
                       VALUES              (?,    ?,    ?,   ?,     ?,     ?,      ?,       ?,     ?,      ?      )
                      ");
  $sth->execute($zoneid,
                $zone,
                $soa->ttl,
                $soa->mname,
                $soa->rname,
                $soa->serial,
                $soa->refresh,
                $soa->retry,
                $soa->expire,
                $soa->minimum,
               );
}

exit 0;
